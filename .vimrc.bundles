" 可将<Leader>符变为, 默认是 \
let mapleader = ","

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#rc()
" vundle 插件
Plugin 'VundleVim/Vundle.vim'
" 函数 / 变量 说明生成器
Plugin 'vim-scripts/DoxygenToolkit.vim'
" 基础库
Plugin 'vim-scripts/L9'
" ctrl + p 搜索文件
Plugin 'kien/ctrlp.vim'
" 代码对齐
Plugin 'godlygeek/tabular'
" 代码注释工具
Plugin 'scrooloose/nerdcommenter'
" 函数名预览
Plugin 'majutsushi/tagbar'
" 快速跳转插件
Plugin 'Lokaltog/vim-easymotion'
" 代码线
Plugin 'nathanaelkane/vim-indent-guides'
" VIM主题
Plugin 'flazz/vim-colorschemes'
" 自动匹配括号
Plugin 'jiangmiao/auto-pairs'
" 代码片段工具
Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'tomtom/tlib_vim'
Plugin 'garbas/vim-snipmate'
Plugin 'honza/vim-snippets'
" 文件树
Plugin 'scrooloose/nerdtree'
" 状态栏美化
Plugin 'maciakl/vim-neatstatus'
" 超级搜索
Plugin 'haya14busa/incsearch.vim'

if version >= 800
    " 主题切换插件
    Plugin 'chxuan/change-colorscheme'
    " 代码语法检测工具
    Plugin 'w0rp/ale'
endif
if version < 800
    " 语法检查
    Plugin 'vim-syntastic/syntastic'
endif

call vundle#end()

if version >= 800
    " change-colorscheme 设置
    nnoremap <silent> <F9> :ShowColorScheme<cr>
    nnoremap <silent> <F10> :RandomColorScheme<cr>
    nnoremap <silent> <F11> :PreviousColorScheme<cr>
    nnoremap <silent> <F12> :NextColorScheme<cr>

    " ale 语法检查配置
    " 始终开启标志列
    let g:ale_sign_column_always = 1
    let g:ale_set_highlights = 0
    " 普通模式下，sp前往上一个错误或警告，sn前往下一个错误或警告
    nmap sp <Plug>(ale_previous_wrap)
    nmap sn <Plug>(ale_next_wrap)
    " <Leader>s触发/关闭语法检查
    nmap <Leader>s :ALEToggle<CR>
    " <Leader>d查看错误或警告的详细信息
    nmap <Leader>d :ALEDetail<CR>"
    " 文件内容发生变化时不进行检查
    let g:ale_lint_on_text_changed = 'never'
    " 打开文件时不进行检查
    let g:ale_lint_on_enter = 0"

endif

if version < 800
    " syntastic 设置
    map <F4> :SyntasticToggleMode<CR>
    set statusline+=%#warningmsg#
    set statusline+=%{SyntasticStatuslineFlag()}
    set statusline+=%*

endif

" DoxygenToolkit 配置
let g:DoxygenToolkit_authorName="chengcheng"

" tagbar 配置
map <F8> :TagbarToggle<CR>
let g:tagbar_ctags_bin = 'ctags'  
let g:tagbar_width = 30

" nerdcommenter 说明
"1、 \cc 注释当前行和选中行
"2、 \cn 没有发现和\cc有区别
"3、 \c<空格> 如果被选区域有部分被注释，则对被选区域执行取消注释操作，其它情况执行反转注释操作
"4、 \cm 对被选区域用一对注释符进行注释，前面的注释对每一行都会添加注释
"5、 \ci 执行反转注释操作，选中区域注释部分取消注释，非注释部分添加注释
"6、 \cs 添加性感的注释，代码开头介绍部分通常使用该注释
"7、 \cy 添加注释，并复制被添加注释的部分
"8、 \c$ 注释当前光标到改行结尾的内容
"9、 \cA 跳转到该行结尾添加注释，并进入编辑模式
"10、\ca 转换注释的方式，比如： /**/和//
"11、\cl \cb 左对齐和左右对其，左右对其主要针对/**/
"12、\cu 取消注释>

" vim-easymotion
" ,,w  ,,s  ,,h j k l


" vim-indent-guides 配置
let g:indent_guides_enable_on_vim_startup = 1
" 添加行，开始显示对齐线的缩进级别
let g:indent_guides_start_level = 1           
" 添加行，对齐线的宽度，（1字符）
let g:indent_guides_guide_size = 1

" vim-colorscheme 设置主题
set term=screen-256color
set background=dark
set t_Co=256
colorscheme molokai

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
" 设置error和warning的标志
let g:syntastic_enable_signs = 1
let g:syntastic_error_symbol='x'
let g:syntastic_warning_symbol='>'

" auto-pairs 设置
let g:AutoPairsFlyMode = 0
let g:AutoPairs = {'(':')', '[':']', '{':'}',"'":"'",'"':'"'}
" 启用跳出多行括号对，默认为1，为0则只能跳出同一行的括号
let g:AutoPairsMultilineClose = 1
" 把SPACE键映射为在括号两侧添加空格，默认为1
let g:AutoPairsMapSpace = 1
" 把BACKSPACE键映射为删除括号对和引号，默认为1
let g:AutoPairsMapBS = 1


" nerdtree 设置
map <C-n> :NERDTreeToggle<CR>
" 只剩下 NERDTree 时关闭 VIM
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" 没有指定文件时，默认打开 nerdtree
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
" 打开一个目录时，自动打开 NERDTree
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | exe 'cd '.argv()[0] | endif

" vim-neatstatus 设置
let g:NeatStatusLine_color_insert = 'guifg=#ffffff guibg=#ff0000 gui=bold ctermfg=15 ctermbg=9 cterm=bold'
let g:NeatStatusLine_separator = '>'


" incsearch 设置
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
set hlsearch
let g:incsearch#auto_nohlsearch = 1
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)
